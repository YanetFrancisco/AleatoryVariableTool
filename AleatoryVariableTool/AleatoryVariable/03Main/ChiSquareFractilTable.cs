using System;

namespace AleatoryVariableTool
{
    public static class ChiSquareFractilTable
    {
        #region Tabla (Por favor no mirar)
        public static double[] X = {0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.975, 0.99, 0.995};

        public static int[] Y =
            {
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
                24, 25, 30, 35, 40, 40, 60, 70, 80, 90, 100, 200, 300, 400, 500, 600, 700, 800, 900,
                1000, 2000, 5000, 10000
            };

        public static double[,] Table =
            {
                {
                    0.00003927, 0.0001571, 0.0009821, 0.003932, 0.0158, 0.102, 0.455, 1.323, 2.706, 3.841, 5.024, 6.635,
                    7.879
                },
                {0.010, 0.020, 0.051, 0.103, 0.211, 0.575, 1.386, 2.773, 4.605, 5.991, 7.378, 9.210, 10.597},
                {0.072, 0.115, 0.216, 0.352, 0.584, 1.213, 2.366, 4.108, 6.251, 7.815, 9.348, 11.345, 12.838},
                {0.207, 0.297, 0.484, 0.711, 1.064, 1.923, 3.357, 5.385, 7.779, 9.488, 11.143, 13.277, 14.860},
                {0.412, 0.554, 0.831, 1.145, 1.610, 2.675, 4.351, 6.626, 9.236, 11.070, 12.832, 15.086, 16.750},
                {0.676, 0.872, 1.237, 1.635, 2.204, 3.455, 5.348, 7.841, 10.645, 12.592, 14.449, 16.812, 18.548},
                {0.989, 1.239, 1.690, 2.167, 2.833, 4.255, 6.346, 9.037, 12.017, 14.067, 16.013, 18.475, 20.278},
                {1.344, 1.647, 2.180, 2.733, 3.490, 5.071, 7.344, 10.219, 13.362, 15.507, 17.535, 20.090, 21.955},
                {1.735, 2.088, 2.700, 3.325, 4.168, 5.899, 8.343, 11.389, 14.684, 16.919, 19.023, 21.666, 23.589},
                {2.156, 2.558, 3.247, 3.940, 4.865, 6.737, 9.342, 12.549, 15.987, 18.307, 20.483, 23.209, 25.188},
                {2.603, 3.053, 3.816, 4.575, 5.578, 7.584, 10.341, 13.701, 17.275, 19.675, 21.920, 24.725, 26.757},
                {3.074, 3.571, 4.404, 5.226, 6.304, 8.438, 11.340, 14.845, 18.549, 21.026, 23.337, 26.217, 28.300},
                {3.565, 4.107, 5.009, 5.892, 7.041, 9.299, 12.340, 15.984, 19.812, 22.362, 24.736, 27.688, 29.819},
                {4.075, 4.660, 5.629, 6.571, 7.790, 10.165, 13.339, 17.117, 21.064, 23.685, 26.119, 29.141, 31.319},
                {4.601, 5.229, 6.262, 7.261, 8.547, 11.037, 14.339, 18.245, 22.307, 24.996, 27.488, 30.578, 32.801},
                {5.142, 5.812, 6.908, 7.962, 9.312, 11.912, 15.338, 19.369, 23.542, 26.296, 28.845, 32.000, 34.267},
                {5.697, 6.408, 7.564, 8.672, 10.085, 12.792, 16.338, 20.489, 24.769, 27.587, 30.191, 33.409, 35.718},
                {6.265, 7.015, 8.231, 9.390, 10.865, 13.675, 17.338, 21.605, 25.989, 28.869, 31.526, 34.805, 37.156},
                {6.844, 7.633, 8.907, 10.117, 11.651, 14.562, 18.338, 22.718, 27.204, 30.144, 32.852, 36.191, 38.582},
                {7.434, 8.260, 9.591, 10.851, 12.443, 15.452, 19.337, 23.828, 28.412, 31.410, 34.170, 37.566, 39.997},
                {8.034, 8.897, 10.283, 11.591, 13.240, 16.344, 20.337, 24.935, 29.615, 32.671, 35.479, 38.932, 41.401},
                {8.643, 9.542, 10.982, 12.338, 14.041, 17.240, 21.337, 26.039, 30.813, 33.924, 36.781, 40.289, 42.796},
                {9.260, 10.196, 11.689, 13.091, 14.848, 18.137, 22.337, 27.141, 32.007, 35.172, 38.076, 41.638, 44.181},
                {9.886, 10.856, 12.401, 13.848, 15.659, 19.037, 23.337, 28.241, 33.196, 36.415, 39.364, 42.980, 45.558},
                {10.520, 11.524, 13.120, 14.611, 16.473, 19.939, 24.337, 29.339, 34.382, 37.652, 40.646, 44.314, 46.928}
                ,
                {13.787, 14.953, 16.791, 18.493, 20.599, 24.478, 29.336, 34.800, 40.256, 43.773, 46.979, 50.892, 53.672}
                ,
                {17.192, 18.509, 20.569, 22.465, 24.797, 29.054, 34.336, 40.223, 46.059, 49.802, 53.203, 57.342, 60.275}
                ,
                {20.707, 22.164, 24.433, 26.509, 29.051, 33.660, 39.335, 45.616, 51.805, 55.758, 59.342, 63.691, 66.766}
                ,
                {27.991, 29.707, 32.357, 34.764, 37.689, 42.942, 49.335, 56.334, 63.167, 67.505, 71.420, 76.154, 79.490}
                ,
                {35.534, 37.485, 40.482, 43.188, 46.459, 52.294, 59.335, 66.981, 74.397, 79.082, 83.298, 88.379, 91.952}
                ,
                {
                    43.275, 45.442, 48.758, 51.739, 55.329, 61.698, 69.334, 77.577, 85.527, 90.531, 95.023, 100.425,
                    104.215
                },
                {
                    51.172, 53.540, 57.153, 60.391, 64.278, 71.145, 79.334, 88.130, 96.578, 101.879, 106.629, 112.329,
                    116.321
                },
                {
                    59.196, 61.754, 65.647, 69.126, 73.291, 80.625, 89.334, 98.650, 107.565, 113.145, 118.136, 124.116,
                    128.299
                },
                {
                    67.328, 70.065, 74.222, 77.929, 82.358, 90.133, 99.334, 109.141, 118.498, 124.342, 129.561, 135.807,
                    140.170
                },
                {152.24, 156.43, 162.73, 168.28, 174.84, 186.17, 199.33, 213.10, 226.02, 233.99, 241.06, 249.45, 255.26}
                ,
                {240.66, 245.97, 253.91, 260.88, 269.07, 283.14, 299.33, 316.14, 331.79, 341.40, 349.87, 359.91, 366.84}
                ,
                {330.90, 337.16, 346.48, 354.64, 364.21, 380.58, 399.33, 418.70, 436.65, 447.63, 457.31, 468.72, 476.61}
                ,
                {422.30, 429.39, 439.94, 449.15, 459.93, 478.32, 499.33, 520.95, 540.93, 553.13, 563.85, 576.49, 585.21}
                ,
                {514.53, 522.37, 534.02, 544.18, 556.06, 576.29, 599.33, 622.99, 644.80, 658.09, 669.77, 683.52, 692.98}
                ,
                {607, 616, 629, 640, 652, 674, 699, 725, 748, 763, 775, 790, 800},
                {700, 710, 724, 735, 749, 773, 799, 827, 852, 867, 880, 896, 907},
                {794, 804, 819, 831, 846, 871, 899, 928, 955, 971, 985, 1002, 1013},
                {889, 899, 914, 928, 943, 969, 999, 1030, 1058, 1075, 1090, 1107, 1119},
                {1841, 1856, 1878, 1897, 1919, 1957, 1999, 2042, 2081, 2105, 2126, 2150, 2167},
                {4746, 4770, 4806, 4837, 4872, 4932, 4999, 5067, 5129, 5166, 5198, 5236, 5261},
                {9639, 9674, 9724, 9769, 9819, 9904, 9999, 10095, 10182, 10234, 10279, 10331, 10368}
            };
        #endregion

        /// <summary>
        /// Obtiene un valor de la tabla de los fractiles
        /// </summary>
        public static double GetValue(double alpha, int k)
        {
            int column = 0, row = 0;
            while (Y.Length > column && Y[column] < k)
                column++;
            while (X.Length > row && X[row] < alpha)
                row++;
            if (Math.Abs(X[row] - alpha) < 0.00000000000005)
                return Table[column, row];
            var x1 = X[row];
            var x2 = X[row - 1];
            var y2 = Table[column, row];
            var y1 = Table[column, row-1];
            return ((alpha - x1)/(x2 - x1))*(y2 - y1) + y1;
        }
    }
}
